# Describe
snippet d [des] describe('...'. function() { ... });
	describe('${1:description}', function() {
		${2}
	});
snippet des
	describe('${1:description}', function() {
		${2}
	});
# It
snippet i it('...', function() { ... });...
	it('${1:description}', function() {
		${2}
	});
snippet it it('...', function() { ... });...
	it('${1:description}', function() {
		${2}
	});
# Any
snippet any
	jasmine.any(${1})
# Before Each
snippet b [bef, before] beforeEach(function() { ... });
	beforeEach(function() {
		${1}
	});
snippet bef
	beforeEach(function() {
		${1}
	});
snippet before
	beforeEach(function () {
		${1}
	});
# After Each
snippet a [aft, after] afterEach(function() { ... });
	afterEach(function() {
		${1}
	});
snippet aft
	afterEach(function() {
		${1}
	});
snippet after
	afterEach(function () {
		${1}
	});
# Expect
snippet e [ex] expect(...);...
	expect(${1:subject});
snippet ex
	expect(${1:subject});
#Expect to
snippet e [expect] expect(...).to...();
	expect(${1:subject}).to${2}();
snippet expect
	expect(${1:subject}).to${2}();
# Expect not to be defined
snippet e [notd] expect(...).not.toBeDefined();...
	expect(${1:subject}).not.toBeDefined();
snippet notd
	expect(${1:subject}).not.toBeDefined();
# Expect not to be falsy
snippet e [notf] expect(...).to.toBeFalsy();...
	expect(${1:subject}).not.toBeFalsy();
snippet notf
	expect(${1:subject}).not.toBeFalsy();
# Expect not to be null
snippet e [notn] expect(...).not.toBeNull();...
	expect(${1:subject}).not.toBeNull();
snippet notn
	expect(${1:subject}).not.toBeNull();
# Expect to be truthy
snippet e [nott] expect(...).not.toBeTruthy();...
	expect(${1:subject}).not.toBeTruthy();
snippet nott
	expect(${1:subject}).not.toBeTruthy();
# Expect not to contain
snippet e [notc] expect(...).not.toContain(...);...
	expect(${1:subject}).not.toContain(${2:value});
snippet notc
	expect(${1:subject}).not.toContain(${2:value});
# Expect not to equal
snippet e [note] expect(...}).not.toEqual(...);...
	expect(${1:subject}).not.toEqual(${2:value});
snippet note
	expect(${1:subject}).not.toEqual(${2:value});
# Expect not to match
snippet e [notm] expect(...).not.toBeDefined();...
	expect(${1:subject}).not.toBeDefined();
snippet notm
	expect(${1:subject}).not.toBeDefined();
# Expect not
snippet e [notx] expect(...).not;...
	expect(${1:subject}).not;${2}
snippet notx
	expect(${1:subject}).not;${2}
# Expect to be defined
snippet e [ed] expect(...).toBeDefined();...
	expect(${1:subject}).toBeDefined();
snippet ed
	expect(${1:subject}).toBeDefined();
# Expect to be falsy
snippet e [ef] expect(...).toBeFalsy();...
	expect(${1:subject}).toBeFalsy();
snippet ef
	expect(${1:subject}).toBeFalsy();
# Expect to be null
snippet e [en] expect(...).toBeNull();...
	expect(${1:subject}).toBeNull();
snippet en
	expect(${1:subject}).toBeNull();
# Expect to be truthy
snippet e [et] expect(...).toBeTruthy();...
	expect(${1:subject}).toBeTruthy();
snippet et
	expect(${1:subject}).toBeTruthy();
# Expect to contain
snippet e [ec] expect(...).toContain(...);...
	expect(${1:subject}).toContain(${2:value});
snippet ec
	expect(${1:subject}).toContain(${2:value});
# Expect to equal
snippet e [ee] expect(...).toEqual(...);...
	expect(${1:subject}).toEqual(${2:value});
snippet ee
	expect(${1:subject}).toEqual(${2:value});
# Expect to match
snippet e [em] expect(...).toMatch(...);...
	expect(${1:subject}).toMatch(${2:pattern});
snippet em
	expect(${1:subject}).toMatch(${2:pattern});
# Expect was called with
snippet e [escw] expect(...).wasCalledWith(...);...
	expect(${1:subject}).wasCalledWith(${2:arguments});
snippet escw
	expect(${1:subject}).wasCalledWith(${2:arguments});
# Expect was called
snippet e [esc] expect(...).wasCalled();...
	expect(${1:subject}).wasCalled();
snippet esc
	expect(${1:subject}).wasCalled();
# Expect was not called with
snippet e [notscw] expect(...).wasNotCalledWith(...);...
	expect(${1:subject}).wasNotCalledWith(${2:arguments});
snippet notscw
	expect(${1:subject}).wasNotCalledWith(${2:arguments});
# Expect was not called
snippet e [notsc] expect(...).wasNotCalled();...
	expect(${1:subject}).wasNotCalled();
snippet notsc
	expect(${1:subject}).wasNotCalled();
# Spy on
snippet s [spy] spyOn(..., '...');
	spyOn(${1:object}, '${2:method}');
snippet spy
	spyOn(${1:object}, '${2:method}');
# Spy on and call fake
snippet s [scf] spyOn(..., '...').andCallFake(...);...
	spyOn(${1:object}, '${2:method}').andCallFake(${3:function});
snippet scf
	spyOn(${1:object}, '${2:method}').andCallFake(${3:function});
# Spy on and call through
snippet s [sct] spyOn(..., '...').andCallThrough();...
	spyOn(${1:object}, '${2:method}').andCallThrough();
snippet sct
	spyOn(${1:object}, '${2:method}').andCallThrough();
# Spy on and return
snippet s [sr] spyOn(..., '...').andReturn(...);...
	spyOn(${1:object}, '${2:method}').andReturn(${3:arguments});
snippet sr
	spyOn(${1:object}, '${2:method}').andReturn(${3:arguments});
# Spy on and throw
snippet s [st] spyOn(..., '...').andThrow(...);...
	spyOn(${1:object}, '${2:method}').andThrow(${3:exception});
snippet st
	spyOn(${1:object}, '${2:method}').andThrow(${3:exception});
# Matcher
snippet m [matcher] to...: function { [init] ... return ...; },
	to${1}: function() {
		var summary = this.actual;
		this.actual = summary.clone().wrap('<div>').parent().html();

		${2}

		return ${3:false};
	},
snippet matcher
	to${1}: function() {
		var summary = this.actual;
		this.actual = summary.clone().wrap('<div>').parent().html();

		${2}

		return ${3:false};
	},
#Helper
snippet h [helper] beforeEach(function() { this.addMatchers({ [matcher] } })
	beforeEach(function() {
		this.addMatchers({

			to${1}: function() {
				var summary = this.actual;
				this.actual = summary.clone().wrap('<div>').parent().html();

				${2}

				return ${3:false};
			},
		});
	});
snippet helper
	beforeEach(function() {
		this.addMatchers({

			to${1}: function() {
				var summary = this.actual;
				this.actual = summary.clone().wrap('<div>').parent().html();

				${2}

				return ${3:false};
			},
		});
	});
# Runs
snippet r [ru] runs(function() { ... }); ...
	runs(function() {
		${1}
	});
snippet ru
	runs(function() {
		${1}
	});
# Waits
snippet w [wa] waits(...);...
	waits(${1});
snippet wa
	waits(${1});
